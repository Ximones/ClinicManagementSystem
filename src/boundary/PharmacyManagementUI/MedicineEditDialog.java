package boundary.PharmacyManagementUI;

import adt.DoublyLinkedList;
import adt.Pair;
import control.MedicineControl;
import enitity.Medicine;
import java.awt.Frame;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import utility.ImageUtils;

/**
 *
 * @author Lee Wan Ching
 */
public class MedicineEditDialog extends javax.swing.JDialog {

    private MedicineControl medicineControl;
    private DoublyLinkedList<Pair<String, Medicine>> masterMedicineList;
    private Medicine medicineToEdit = null;
    private static final DecimalFormat df2 = new DecimalFormat("#0.00");

    /**
     * Creates new form MedicineEditDialog
     */
    public MedicineEditDialog(Frame parent, boolean modal,
            DoublyLinkedList<Pair<String, Medicine>> medicineList) {
        super(parent, modal);
        initComponents();
        this.masterMedicineList = medicineList;
        this.medicineControl = new MedicineControl();
        logoLabel = ImageUtils.getImageLabel("tarumt_logo.png", logoLabel);
        this.setLocationRelativeTo(parent);

        // load category options
        formCategoryBox.addItem("Select Category");
        formCategoryBox.addItem("Antibiotic");
        formCategoryBox.addItem("Analgesic");
        formCategoryBox.addItem("Antipyretic");
        formCategoryBox.addItem("Antihistamine");
        formCategoryBox.addItem("Antiviral");
        formCategoryBox.addItem("Antifungal");
        formCategoryBox.addItem("Antidepressant");
        formCategoryBox.addItem("Cardiovascular");
        formCategoryBox.addItem("Respiratory");
        formCategoryBox.addItem("Gastrointestinal");
        formCategoryBox.addItem("Dermatological");
        formCategoryBox.addItem("Vitamin / Supplement");
        formCategoryBox.addItem("Other");

        // load formulation options
        formFormulationBox.addItem("Select Formulation");
        formFormulationBox.addItem("Tablet");
        formFormulationBox.addItem("Capsule");
        formFormulationBox.addItem("Liquid");
        formFormulationBox.addItem("Syrup");
        formFormulationBox.addItem("Ointment");
        formFormulationBox.addItem("Cream");
        formFormulationBox.addItem("Gel");
        formFormulationBox.addItem("Injection");
        formFormulationBox.addItem("Inhaler");
        formFormulationBox.addItem("Drops");
        formFormulationBox.addItem("Suppository");
        formFormulationBox.addItem("Powder");
        formFormulationBox.addItem("Patch");
        formFormulationBox.addItem("Spray");

        setFieldsEditable(false);
    }

    public void loadMedicine(String medicineId) {
        masterMedicineList.sort();
        Pair<String, Medicine> foundPair = masterMedicineList.binarySearch(new Pair<>(medicineId, null));

        if (foundPair != null) {
            medicineToEdit = foundPair.getValue();

            formMedIDfield.setText(medicineToEdit.getMedicineId());
            formNameInput.setText(medicineToEdit.getName());
            formBrandNameInput.setText(medicineToEdit.getBrandName());
            formCategoryBox.setSelectedItem(medicineToEdit.getCategory());
            formFormulationBox.setSelectedItem(medicineToEdit.getFormulation());
            formDosageInput.setText(medicineToEdit.getDosageForm());
            formQuantityInput.setText(String.valueOf(medicineToEdit.getQuantity()));
            formPriceInput.setText(String.valueOf(medicineToEdit.getPrice()));
        } else {
            JOptionPane.showMessageDialog(this,
                    "Medicine with ID '" + medicineId + "' not found.",
                    "Not Found", JOptionPane.ERROR_MESSAGE);
            dispose();
        }
    }

    private void setFieldsEditable(boolean editable) {
        formNameInput.setEditable(editable);
        formBrandNameInput.setEditable(editable);
        formCategoryBox.setEnabled(editable);
        formFormulationBox.setEnabled(editable);
        formDosageInput.setEditable(editable);
        formQuantityInput.setEditable(editable);
        formPriceInput.setEditable(editable);
        saveButton.setEnabled(editable);
    }

    private void clearForm() {
        formMedIDfield.setText("");
        formNameInput.setText("");
        formBrandNameInput.setText("");
        formCategoryBox.setSelectedIndex(0);
        formFormulationBox.setSelectedIndex(0);
        formDosageInput.setText("");
        formQuantityInput.setText("");
        formPriceInput.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        titlePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        formWrapperPanel = new javax.swing.JPanel();
        formGridPanel = new javax.swing.JPanel();
        formMedIDlabel = new javax.swing.JLabel();
        formMedIDfield = new javax.swing.JTextField();
        formNameLabel = new javax.swing.JLabel();
        formNameInput = new javax.swing.JTextField();
        formBrandNameLabel = new javax.swing.JLabel();
        formBrandNameInput = new javax.swing.JTextField();
        formCategoryLabel = new javax.swing.JLabel();
        formCategoryBox = new javax.swing.JComboBox<>();
        formFormulationLabel = new javax.swing.JLabel();
        formFormulationBox = new javax.swing.JComboBox<>();
        formDosageLabel = new javax.swing.JLabel();
        formDosageInput = new javax.swing.JTextField();
        formQuantityLabel = new javax.swing.JLabel();
        formQuantityInput = new javax.swing.JTextField();
        formPriceLabel = new javax.swing.JLabel();
        formPriceInput = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 640));
        setPreferredSize(new java.awt.Dimension(700, 640));

        logoPanel.setLayout(new java.awt.BorderLayout());
        logoPanel.add(logoLabel, java.awt.BorderLayout.CENTER);

        titlePanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Search ID to Edit :");
        jPanel2.add(jLabel1);

        searchTextField.setColumns(15);
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        jPanel2.add(searchTextField);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel2.add(searchButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        formGridPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Medicine Information :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Corbel", 1, 14))); // NOI18N
        formGridPanel.setMinimumSize(new java.awt.Dimension(400, 380));
        formGridPanel.setPreferredSize(new java.awt.Dimension(400, 380));
        formGridPanel.setLayout(new java.awt.GridLayout(8, 2, 5, 15));

        formMedIDlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formMedIDlabel.setText("ID :");
        formGridPanel.add(formMedIDlabel);

        formMedIDfield.setEditable(false);
        formMedIDfield.setColumns(15);
        formGridPanel.add(formMedIDfield);

        formNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formNameLabel.setText("Name :");
        formGridPanel.add(formNameLabel);

        formNameInput.setColumns(15);
        formGridPanel.add(formNameInput);

        formBrandNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formBrandNameLabel.setText("Brand Name :");
        formGridPanel.add(formBrandNameLabel);

        formBrandNameInput.setColumns(15);
        formGridPanel.add(formBrandNameInput);

        formCategoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formCategoryLabel.setText("Category : ");
        formGridPanel.add(formCategoryLabel);

        formCategoryBox.setPreferredSize(new java.awt.Dimension(100, 29));
        formGridPanel.add(formCategoryBox);

        formFormulationLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formFormulationLabel.setText("Formulation : ");
        formGridPanel.add(formFormulationLabel);

        formFormulationBox.setPreferredSize(new java.awt.Dimension(100, 29));
        formGridPanel.add(formFormulationBox);

        formDosageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formDosageLabel.setText("Dosage : ");
        formGridPanel.add(formDosageLabel);

        formDosageInput.setColumns(15);
        formGridPanel.add(formDosageInput);

        formQuantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formQuantityLabel.setText("Quantity :");
        formGridPanel.add(formQuantityLabel);

        formQuantityInput.setColumns(15);
        formGridPanel.add(formQuantityInput);

        formPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formPriceLabel.setText("Price (RM) :");
        formGridPanel.add(formPriceLabel);

        formPriceInput.setColumns(15);
        formGridPanel.add(formPriceInput);

        formWrapperPanel.add(formGridPanel);

        jPanel1.add(formWrapperPanel, java.awt.BorderLayout.CENTER);

        titlePanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        logoPanel.add(titlePanel, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(logoPanel, java.awt.BorderLayout.PAGE_START);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(saveButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String idToFind = searchTextField.getText().trim().toUpperCase();
        if (idToFind.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Medicine ID to find.");
            return;
        }

        Pair<String, Medicine> foundPair = medicineControl.findMedicineById(idToFind, masterMedicineList);

        if (foundPair != null) {
            this.medicineToEdit = foundPair.getValue();

            formMedIDfield.setText(medicineToEdit.getMedicineId());
            formNameInput.setText(medicineToEdit.getName());
            formBrandNameInput.setText(medicineToEdit.getBrandName());
            formCategoryBox.setSelectedItem(medicineToEdit.getCategory());
            formFormulationBox.setSelectedItem(medicineToEdit.getFormulation());
            formDosageInput.setText(medicineToEdit.getDosageForm());
            formQuantityInput.setText(String.valueOf(medicineToEdit.getQuantity()));
            formPriceInput.setText(df2.format(medicineToEdit.getPrice()));

            setFieldsEditable(true);
        } else {
            JOptionPane.showMessageDialog(this, "Medicine with ID '" + idToFind + "' not found.");
            clearForm();
            this.medicineToEdit = null;
            setFieldsEditable(false);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (medicineToEdit == null) {
            JOptionPane.showMessageDialog(this, "Please search for a medicine first.");
            return;
        }

        try {
            String name = formNameInput.getText().trim();
            String brand = formBrandNameInput.getText().trim();
            String category = (String) formCategoryBox.getSelectedItem();
            String formulation = (String) formFormulationBox.getSelectedItem();
            String dosage = formDosageInput.getText().trim();

            // Quantity validation
            int quantity;
            try {
                quantity = Integer.parseInt(formQuantityInput.getText().trim());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(
                        this,
                        "Please enter a valid number for quantity.",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE
                );
                return; // stop execution
            }

            // Price validation
            double price;
            try {
                price = Double.parseDouble(formPriceInput.getText().trim());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(
                        this,
                        "Please enter a valid number for price.",
                        "Input Error",
                        JOptionPane.ERROR_MESSAGE
                );
                return; // stop execution
            }

            // Build updated medicine
            Medicine updatedMedicine = new Medicine(
                    "", name, brand, category, formulation, dosage, quantity, price
            );

            if (medicineControl.updateMedicine(medicineToEdit.getMedicineId(), updatedMedicine, masterMedicineList)) {
                medicineControl.saveMedicines(masterMedicineList);
                JOptionPane.showMessageDialog(this, "Medicine information updated successfully.");
                dispose();
            } else {
                JOptionPane.showMessageDialog(
                        this, "Failed to update medicine.", "Update Error", JOptionPane.ERROR_MESSAGE
                );
            }

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Unexpected error occurred.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicineEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicineEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicineEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicineEditDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DoublyLinkedList<Pair<String, Medicine>> dummyList = new DoublyLinkedList<>();
                MedicineEditDialog dialog = new MedicineEditDialog(new javax.swing.JFrame(), true, dummyList);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField formBrandNameInput;
    private javax.swing.JLabel formBrandNameLabel;
    private javax.swing.JComboBox<String> formCategoryBox;
    private javax.swing.JLabel formCategoryLabel;
    private javax.swing.JTextField formDosageInput;
    private javax.swing.JLabel formDosageLabel;
    private javax.swing.JComboBox<String> formFormulationBox;
    private javax.swing.JLabel formFormulationLabel;
    private javax.swing.JPanel formGridPanel;
    private javax.swing.JTextField formMedIDfield;
    private javax.swing.JLabel formMedIDlabel;
    private javax.swing.JTextField formNameInput;
    private javax.swing.JLabel formNameLabel;
    private javax.swing.JTextField formPriceInput;
    private javax.swing.JLabel formPriceLabel;
    private javax.swing.JTextField formQuantityInput;
    private javax.swing.JLabel formQuantityLabel;
    private javax.swing.JPanel formWrapperPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
