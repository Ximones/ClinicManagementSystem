/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package boundary.ConsultationManagementUI;

import boundary.MainFrame;
import control.ConsultationControl;
import utility.ReportGenerator;
import enitity.Consultation;
import enitity.Appointment;
import adt.DoublyLinkedList;
import adt.Pair;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

/**
 * Consultation Reports Panel
 * @author Zhen Bang
 */
public class ConsultationReportsPanel extends javax.swing.JPanel {

    private MainFrame mainFrame;
    private ConsultationControl consultationControl;
    private DefaultTableModel reportTableModel;
    
    /**
     * Creates new form ConsultationReportsPanel
     */
    public ConsultationReportsPanel(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        this.consultationControl = new ConsultationControl();
        initComponents();
        setupUI();
        setupTable();
    }
    
    private void setupUI() {
        setPreferredSize(new Dimension(700, 500));
        setBackground(new Color(240, 248, 255));
        
        // Style title
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setForeground(new Color(25, 25, 112));
        
        // Style buttons
        styleButton(dailyAppointmentsButton, "Daily Appointments Report", new Color(70, 130, 180));
        styleButton(consultationTypesButton, "Consultation Types Report", new Color(60, 179, 113));
        styleButton(backButton, "Back", new Color(128, 128, 128));
    }
    
    private void styleButton(JButton button, String text, Color backgroundColor) {
        button.setText(text);
        button.setFont(new Font("Arial", Font.BOLD, 12));
        button.setForeground(Color.WHITE);
        button.setBackground(backgroundColor);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }
    
    private void setupTable() {
        String[] columnNames = {"Report Type", "Generated Date", "Status"};
        reportTableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        reportTable.setModel(reportTableModel);
        reportTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        reportTable.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        dailyAppointmentsButton = new javax.swing.JButton();
        consultationTypesButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 500));

        titleLabel.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Consultation Reports");

        dailyAppointmentsButton.setText("Daily Appointments Report");
        dailyAppointmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailyAppointmentsButtonActionPerformed(evt);
            }
        });

        consultationTypesButton.setText("Consultation Types Report");
        consultationTypesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultationTypesButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Report Type", "Generated Date", "Status"
            }
        ));
        jScrollPane1.setViewportView(reportTable);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Report Information"));

        jLabel1.setText("Available Reports:");

        jLabel2.setText("1. Daily Appointments Report - Shows all scheduled appointments for today");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dailyAppointmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(consultationTypesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dailyAppointmentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consultationTypesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dailyAppointmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyAppointmentsButtonActionPerformed
        try {
            List<Appointment> todayAppointments = consultationControl.getTodayAppointments();
            
            if (todayAppointments.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No appointments scheduled for today.", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            // Create a simple report display
            StringBuilder report = new StringBuilder();
            report.append("DAILY APPOINTMENTS REPORT\n");
            report.append("Date: ").append(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("\n");
            report.append("Total Appointments: ").append(todayAppointments.size()).append("\n\n");
            
            for (Appointment appointment : todayAppointments) {
                report.append("ID: ").append(appointment.getAppointmentID()).append("\n");
                report.append("Patient: ").append(appointment.getPatient() != null ? appointment.getPatient().getPatientName() : "N/A").append("\n");
                report.append("Doctor: ").append(appointment.getDoctor() != null ? appointment.getDoctor().getName() : "N/A").append("\n");
                report.append("Time: ").append(appointment.getFormattedDateTime()).append("\n");
                report.append("Type: ").append(appointment.getAppointmentType()).append("\n");
                report.append("Status: ").append(appointment.getStatus()).append("\n");
                report.append("Reason: ").append(appointment.getReason()).append("\n");
                report.append("----------------------------------------\n");
            }
            
            // Display report in a dialog
            JTextArea textArea = new JTextArea(report.toString());
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(500, 400));
            
            JOptionPane.showMessageDialog(this, scrollPane, "Daily Appointments Report", JOptionPane.INFORMATION_MESSAGE);
            
            // Add to report table
            addReportToTable("Daily Appointments Report", LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")), "Generated");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error generating daily appointments report: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_dailyAppointmentsButtonActionPerformed

    private void consultationTypesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultationTypesButtonActionPerformed
        try {
            DoublyLinkedList<Pair<String, Integer>> typeCounts = consultationControl.getConsultationTypeCounts();
            
            if (typeCounts.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No consultations found to generate report.", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            // Create a simple report display
            StringBuilder report = new StringBuilder();
            report.append("CONSULTATION TYPES REPORT\n");
            report.append("Generated Date: ").append(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("\n\n");
            
            int totalConsultations = 0;
            for (Pair<String, Integer> pair : typeCounts) {
                totalConsultations += pair.getValue();
            }
            
            report.append("Total Consultations: ").append(totalConsultations).append("\n\n");
            report.append("Breakdown by Type:\n");
            report.append("----------------------------------------\n");
            
            for (Pair<String, Integer> pair : typeCounts) {
                String type = pair.getKey();
                int count = pair.getValue();
                double percentage = (double) count / totalConsultations * 100;
                
                report.append("Type: ").append(type).append("\n");
                report.append("Count: ").append(count).append("\n");
                report.append("Percentage: ").append(String.format("%.1f", percentage)).append("%\n");
                report.append("----------------------------------------\n");
            }
            
            // Display report in a dialog
            JTextArea textArea = new JTextArea(report.toString());
            textArea.setEditable(false);
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(500, 400));
            
            JOptionPane.showMessageDialog(this, scrollPane, "Consultation Types Report", JOptionPane.INFORMATION_MESSAGE);
            
            // Add to report table
            addReportToTable("Consultation Types Report", LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")), "Generated");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error generating consultation types report: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_consultationTypesButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        mainFrame.showPanel("consultationManagement");
    }//GEN-LAST:event_backButtonActionPerformed

    private void addReportToTable(String reportType, String generatedDate, String status) {
        Object[] row = {reportType, generatedDate, status};
        reportTableModel.addRow(row);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton consultationTypesButton;
    private javax.swing.JButton dailyAppointmentsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable reportTable;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
} 